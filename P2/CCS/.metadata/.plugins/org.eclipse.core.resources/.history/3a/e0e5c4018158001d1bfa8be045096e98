/*
    Libreria para la implementacion de la funcionalidad de los Servo Motores
    Daniel Bazo Correa & Juan Jose Navarrete Galvez
*/
#include <stdbool.h>
#include <stdint.h>

//  Ciclos para amplitud de pulso de parada a 1.54ms (para que este parado el motor derecho)
#define STOPCOUNT_DER ((SysCtlClockGet() / 16) * 0.001503)
//  Ciclos para amplitud de pulso de parada a 1.55ms (para que este parado el motor izquierdo)
#define STOPCOUNT_IZQ ((SysCtlClockGet() / 16) * 0.00154)

/*
    Ciclos de reloj para conseguir una senal periodica de 50Hz (segun reloj de periferico usado)

    Comentarios:

    tiempo transcurrido = Numero de ciclos contados * Periodo = Numero de ciclos contados * (1 / frecuencia)
    t = N * T = N * (1 / f)
    Periodo de la onda PWM que hemos definido (el valor maximo posible es 65535)
    Como el reloj del micro funcionara a 40 MHz, tenemos que (1/50) / (1/(40*10e6)) = 800000, por lo tanto hay que dividirlo (mirar el main)
    Lo dividimos entre 16 (por ser el divisor del PWM, ver funcion main()) y  lo multiplicamos por 0.02 (periodo de 1/50). Asi obtenemos una senal
    con un periodo de 50 Hz
*/
#define PERIOD_PWM ((SysCtlClockGet() / 16) * 0.02)

//  Ciclos para amplitud de pulso de 1ms (max velocidad en un sentido)
//#define COUNT_1MS ((SysCtlClockGet() / 16) * 0.001)
#define COUNT_1MS ((SysCtlClockGet() / 16) * 0.00138)       //0.00142
//  Ciclos para amplitud de pulso de 2ms (max velocidad en el otro sentido)
//#define COUNT_2MS ((SysCtlClockGet() / 16) * 0.002)
#define COUNT_2MS ((SysCtlClockGet() / 16) * 0.00162)       //0.00169

//  Pasos para cambiar entre el pulso de 2ms al de 1ms
#define NUM_STEPS 50
//  Variacion de amplitud tras pulsacion
#define CYCLE_INCREMENTS (abs(COUNT_1MS-COUNT_2MS)) / NUM_STEPS

//  Tamano de paso desde el punto medio hasta los limites superiores e inferiores de cada motor
//  Para el derecho ambos incrementos son iguales, para el izquierdo no.
#define RECORRIDO_DER 300 // 300 = STOPCOUNT_DER - COUNT_1MS
#define RECORRIDO_IZQ_1 200 //200 = COUNT_2MS - STOPCOUNT_IZQ
#define RECORRIDO_IZQ_2 400 // 400 = STOPCOUNT_IZQ - COUNT_1MS

#define AMBAS_RUEDAS 0
#define RUEDA_IZQUIERDA 1
#define RUEDA_DERECHA 2



// DEFINICION VARIABLES GLOBALES
uint32_t estado, DCanterior[2];


// Definicion de funciones
void servos_init(void);
void mov_rectilineo_servos(uint32_t ui32Status);
void mov_curvo_servos(uint32_t ui32Status);
void mov_rotatorio_servos(uint32_t ui32Status);
void parar_pausar_motor(uint32_t ui32Status);
void mov_una_rueda(uint32_t ui32Status);
void mov_rueda_Qt(uint8_t motor, int8_t porcentaje);

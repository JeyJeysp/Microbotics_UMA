#include <stdbool.h>
#include <stdint.h>
#include <time.h>

#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_ints.h"

#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "driverlib/interrupt.h"
#include "driverlib/adc.h"
#include "driverlib/timer.h"
#include "utils/uartstdio.h"
#include "drivers/buttons.h"
#include "drivers/rgb.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "utils/cpu_usage.h"
#include "commands.h"
#include "timers.h"


//  Globales
QueueHandle_t cola_freertos;
static uint32_t ui32Period, ui32DutyCycle[2];
uint32_t g_ui32CPUUsage, g_ulSystemClock;
//  Prioridad para la tarea maestra
#define MASTERTASKPRIO 1
//  Tamaño de pila para la tarea
#define MASTERTASKSIZE 512

/*
    Ciclos de reloj para conseguir una señal periódica de 50Hz (según reloj de periférico usado)

    DBC:

    tiempo transcurrido = Numero de ciclos contados * Periodo = Numero de ciclos contados * (1 / frecuencia)
    t = N * T = N * (1 / f)
    Periodo de la onda PWM que hemos definido (el valor maximo posible es 65535)
    Como el reloj del micro funcionará a 40 MHz, tenemos que (1/50) / (1/(40*10e6)) = 800000, por lo tanto hay que dividirlo (mirar el main)
    Lo dividimos entre 16 (por ser el divisor del PWM, ver función main()) y  lo multiplicamos por 0.02 (periodo de 1/50). Así obtenemos una señal
    con un periodo de 50 Hz
*/
#define PERIOD_PWM ((SysCtlClockGet() / 16) * 0.02)

//  Ciclos para amplitud de pulso de 1ms (max velocidad en un sentido)
//#define COUNT_1MS ((SysCtlClockGet() / 16) * 0.001)
#define COUNT_1MS ((SysCtlClockGet() / 16) * 0.0013)
//  Ciclos para amplitud de pulso de 2ms (max velocidad en el otro sentido)
#define COUNT_2MS ((SysCtlClockGet() / 16) * 0.002)

//  Ciclos para amplitud de pulso de parada a 1.54ms (para que esté parado el motor derecho)
#define STOPCOUNT_DER ((SysCtlClockGet() / 16) * 0.00154)
//  Ciclos para amplitud de pulso de parada a 1.55ms (para que esté parado el motor izquierdo)
#define STOPCOUNT_IZQ ((SysCtlClockGet() / 16) * 0.00154)

//  Pasos para cambiar entre el pulso de 2ms al de 1ms
#define NUM_STEPS 50
//  Variacion de amplitud tras pulsacion
#define CYCLE_INCREMENTS (abs(COUNT_1MS-COUNT_2MS)) / NUM_STEPS


#ifdef DEBUG
void __error__(char *nombrefich, uint32_t linea)
{
    while(1)
    {
    }
}
#endif

void vApplicationStackOverflowHook(TaskHandle_t pxTask,  char *pcTaskName)
{
    while(1)
    {
    }
}

//Esta es la funcion que ejecuta cuando el RTOS se queda sin memoria dinamica
void vApplicationMallocFailedHook (void)
{
    while(1);
}

//Esto se ejecuta cada Tick del sistema. LLeva la estadistica de uso de la CPU (tiempo que la CPU ha estado funcionando)
void vApplicationTickHook( void ){
    static uint8_t ui8Count = 0;

    if (++ui8Count == 10)
    {
        g_ui32CPUUsage = CPUUsageTick();
        ui8Count = 0;
    }
}

//Esto se ejecuta cada vez que entra a funcionar la tarea Idle
void vApplicationIdleHook (void )
{
        SysCtlSleep();
}

//Esta tarea esta definida en el fichero command.c, es la que se encarga de procesar los comandos.
//Aqui solo la declaramos para poderla crear en la funcion main.
extern void vUARTTask( void *pvParameters );

/*
    TODO:

    Rutinas de interrupción de pulsadores
    Boton Izquierdo: modifica ciclo de trabajo en CYCLE_INCREMENTS para el servo conectado a PF2, hasta llegar a COUNT_1MS
    Boton Derecho: modifica ciclo de trabajo en CYCLE_INCREMENTS para el servo conectado a PF2, hasta llegar a COUNT_2MS
 */
static portTASK_FUNCTION(TareaCambioPWM, pvParameters)
{
    uint32_t ui32Status;

    while(1)
    {
        if(xQueueReceive(cola_freertos, &ui32Status, portMAX_DELAY) == pdTRUE)
        {
            if((ui32Status & LEFT_BUTTON))// izquierda
            {
                UARTprintf("Cycle[0]: %d, Cycle[1]: %d, Count: %d\r\n", ui32DutyCycle[0], ui32DutyCycle[1], (uint32_t)COUNT_1MS);
                if(ui32DutyCycle[0] > COUNT_1MS)
                {
                    ui32DutyCycle[0] -= CYCLE_INCREMENTS;
                    ui32DutyCycle[1] += CYCLE_INCREMENTS;
                    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, ui32DutyCycle[0]);
                    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, ui32DutyCycle[1]);
                    UARTprintf("Aumento el ciclo, marcha alante\r\n");
                }
                else
                {
                    UARTprintf("Tope del ciclo, marcha alante\r\n");
                }
            }

            //  DBC: Cuando pulsamos el botón derecho
            else if((ui32Status & RIGHT_BUTTON))
            {
                UARTprintf("Cycle[0]: %d, Cycle[1]: %d, Count: %d\r\n", ui32DutyCycle[0], ui32DutyCycle[1], (uint32_t)COUNT_2MS);
                if(ui32DutyCycle[0] < COUNT_2MS)
                {
                    ui32DutyCycle[0] += CYCLE_INCREMENTS;
                    ui32DutyCycle[1] -= CYCLE_INCREMENTS;
                    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, ui32DutyCycle[0]);
                    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, ui32DutyCycle[1]);
                    UARTprintf("Aumento el ciclo, marcha atrás\r\n");
                }
                else
                {
                    UARTprintf("Tope del ciclo, marcha atrás\r\n");
                }
            }
        }
    }
}

int main(void)
{
    cola_freertos = xQueueCreate(16, sizeof(uint32_t));
    if(cola_freertos == NULL)
    {
        while(1);
    }

    /*
         Elegir reloj adecuado para los valores de ciclos sean de tamaño soportable

         DBC:

         Vamos a elegir un reloj del sistema a 40 MHz
     */
    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);

    // Get the system clock speed.
    g_ulSystemClock = SysCtlClockGet();
    // Habilita el clock gating de los perifericos durante el bajo consumo,
    // perifericos que se desee activos en modo Sleep, deben habilitarse con SysCtlPeripheralSleepEnable
    SysCtlPeripheralClockGating(true);
    // Inicializa el subsistema de medida del uso de CPU (mide el tiempo que la CPU no esta dormida)
    // Para eso utiliza un timer, que aqui hemos puesto que sea el TIMER5 (ultimo parametro que se pasa a la funcion)
    // (y por tanto este no se deberia utilizar para otra cosa).
    CPUUsageInit(g_ulSystemClock, configTICK_RATE_HZ/10, 5);

    /*
        DBC:

        Dividir el periodo del PWM para ajustarse al máximo ( periodo onda PWM maximo de 65535)), tenemos que al dividirlo entre 16
        ya que es el mínimo valor que deja un valor exacto en el periodo y que se encuentra por debajo del límite
    */
    SysCtlPWMClockSet(SYSCTL_PWMDIV_16);

    /*
         Configura pulsadores placa TIVA (int. por flanco de bajada)

         DBC:

         Inicializa los botones y habilita sus interrupciones
     */
    ButtonsInit();
    //  DBC: Cconfiguración a flanco de bajada
    GPIOIntTypeSet(GPIO_PORTF_BASE, ALL_BUTTONS, GPIO_FALLING_EDGE);
    GPIOIntEnable(GPIO_PORTF_BASE, ALL_BUTTONS);
    IntEnable(INT_GPIOF);

    /*
        Configuracion ondas PWM: frecuencia 50Hz, anchura inicial= valor STOPCOUNT, 1540us
        para salida por PF2, y COUNT_1MS (o COUNT_2MS ) para salida por PF3(puedes ponerlo
        inicialmente a PERIOD_PWM/10)

        DBC:

        Tenemos que PF2 emplea el módulo PWM M1, con PWM6 Y PF3 M1 con PWM7
    */
    //  DBC: Habilitamos el módulo M1 del PWM
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
    //  DBC: Habilitamos el bajo consumo del periférico
    SysCtlPeripheralSleepEnable(SYSCTL_PERIPH_PWM1);
    //  DBC: Configuramos los pines como salida PWM
    GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_2|GPIO_PIN_3);
    GPIOPinConfigure(GPIO_PF2_M1PWM6);
    GPIOPinConfigure(GPIO_PF3_M1PWM7);

    //  DBC: (página 207 DriverLib) PWM_GEN_3 cubre a M1PWM6 y M1PWM7
    PWMGenConfigure(PWM1_BASE, PWM_GEN_3, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);

    ui32Period = PERIOD_PWM;
    ui32DutyCycle[0] = STOPCOUNT_DER;
    ui32DutyCycle[1] = STOPCOUNT_IZQ;

    // Carga la cuenta que establece la frecuencia de la señal PWM
    PWMGenPeriodSet(PWM1_BASE, PWM_GEN_3, ui32Period);
    //Habilita/pone en marcha el generador PWM
    PWMGenEnable(PWM1_BASE, PWM_GEN_3);
    // Habilita la salida de la señal
    PWMOutputState(PWM1_BASE, PWM_OUT_6_BIT|PWM_OUT_7_BIT, true);

    // DBC: Establece el periodo inicial. En este caso permanecerán quietas
    // PF2, salida de PWM 6, motor derecho
    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, ui32DutyCycle[0]);
    // PF3, salida de PWM 7, motor izquierdo
    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, ui32DutyCycle[1]);

    if((xTaskCreate(TareaCambioPWM, "TaskPWM", MASTERTASKSIZE, NULL, tskIDLE_PRIORITY + MASTERTASKPRIO, NULL) != pdTRUE))
    {
        while(1);
    }

    if(initCommandLine(512, tskIDLE_PRIORITY + 1) != pdTRUE)
    {
        while(1);
    }

    vTaskStartScheduler();

    while(1);
}

//  DBC: Función para el tratamiento de los switches
void GPIOFIntHandler(void)
{
    //  DBC: Hay que inicializarlo a False!!
    BaseType_t higherPriorityTaskWoken = pdFALSE;

    //  DBC: Lee el estado del puerto (activos a nivel bajo)
    //  DBC: pasamos el estado de los pines cuando se produjo la interrupcion
    int32_t i32PinStatus = MAP_GPIOIntStatus(GPIO_PORTF_BASE, ALL_BUTTONS);

    //  DBC: FromISR porque estoy en un rutina de tratamiento de interrupción
    //  DBC: Pasamos un valor por referencia, escribe en la cola freeRTOS
    xQueueSendFromISR(cola_freertos, &i32PinStatus, &higherPriorityTaskWoken);
    MAP_GPIOIntClear(GPIO_PORTF_BASE, ALL_BUTTONS);

    //  DBC: Ahora hay que comprobar si hay que hacer el cambio de contexto
    //  DBC: Se puede hacer con CUALQUIERA de las dos lineas siguientes (las dos hacen lo mismo)
    portEND_SWITCHING_ISR(higherPriorityTaskWoken);
}
